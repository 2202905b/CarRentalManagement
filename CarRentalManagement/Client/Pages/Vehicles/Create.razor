@page "/vehicles/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title ">Create New Vehicles</h3>
@* horizontal rule and breakline *@
<hr />
<br />

@* 5. to start the form *@
@* 8. when all validation passed, it will call fn here *@
<EditForm Model="@vehicle" OnValidSubmit="CreateVehicle">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Make: </label>
        <div>
            @* 6. input select = drop down list *@
            <InputSelect @bind-Value="vehicle.MakeID" class="form-control">
                <option value="">-- Select Make --</option>
                @if (Makes != null)
                {
                    foreach (var make in Makes)
                    {
                        @* 7. @ = calling variable *@
                        <option value="@make.Id">@make.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.MakeID)"/>
        </div>
    </div>

    <div class="form-group">
        <label>Model: </label>
        <div>
            @* 6. input select = drop down list *@
            <InputSelect @bind-Value="vehicle.ModelId" class="form-control">
                <option value="">-- Select Model --</option>
                @if (Models != null)
                {
                    foreach (var model in Models)
                    {
                        @* 7. @ = calling variable *@
                        <option value="@model.Id">@model.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.ModelId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Colour: </label>
        <div>
            @* 6. input select = drop down list *@
            <InputSelect @bind-Value="vehicle.ColourId" class="form-control">
                <option value="">-- Select Colour --</option>
                @if (Colours != null)
                {
                    foreach (var colour in Colours)
                    {
                        @* 7. @ = calling variable *@
                        <option value="@colour.Id">@colour.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => vehicle.ColourId)" />
        </div>
    </div>
    
    <div class="form-group">
        <label>Year: </label>
        <div>
            <InputNumber @bind-Value="@vehicle.Year" class="form-control" />
            <ValidationMessage For="@(() => vehicle.Year)" />
        </div>
    </div>

    <div class="form-group">
        <label>License Plate Number: </label>
        <div>
            <InputText @bind-Value="@vehicle.LicensePlateNumber" class="form-control"/>
            <ValidationMessage For="@(() => vehicle.LicensePlateNumber)" />
        </div>
    </div>

    <div class="form-group">
        <label>Daily Rate: </label>
        <div>
            <InputNumber @bind-Value="@vehicle.RentalRate" class="form-control" />
            <ValidationMessage For="@(() => vehicle.RentalRate)" />
        </div>
    </div>  
    <br />
    
    <button type="submit" class="btn btn-success btn-block">
        Create Vehicle
    </button>
</EditForm>

@code {
    // creating Make object
    Vehicle vehicle = new Vehicle();

    // ? = Nullable
    private IList<Make>? Makes;
    private IList<Model>? Models;
    private IList<Colour>? Colours;

    // same function af the vehicle one, but instead of getting vehicles it's getting these 3.
    // this is the dropdown list that will summon upon loading the page
    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
    }

    // creating when button clicked
    private async Task CreateVehicle()
    {
        await _client.PostAsJsonAsync(Endpoints.VehiclesEndpoint, vehicle);
        _navManager.NavigateTo("/vehicles/");
    }
  }
